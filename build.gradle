plugins {
    id 'java'
    id 'application'
}

//Project Properties
description("Gradle Learning Project")
version=1.0
group='com.gradle.learn'
project.ext.xyz="abc"
ext{
    xyz="xyz" //over-riding
    test="external properties"
}

//Application Plugin Configuration:
application {
    mainClassName = 'com.gradle.learn.App'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'com.google.guava:guava:29.0-jre'
    testImplementation 'junit:junit:4.13'
}

task firstTask{
    def abc=123
    println abc
    println "Gradle First Task!!"
    println "**********************************************"
    println project.name
    println project.description
    println project.version
    println project.ext.xyz
    println project.ext.test
    println "**********************************************"
}

task taskX {
    println "task X"
}

//Order of Execution: If you need to ensure the order of task execution more strictly,
// look into using dependsOn for ordering rather than shouldRunAfter.
task taskY {
    shouldRunAfter "taskX"
    println "task Y"
}

task deployToStage{
    doFirst (){
        println "Deployed to Stage"
    }
}

task deployToProd{
    doLast(){
        println "Deployed to Prod"
    }
}

task cleanUpFiles{
    doLast(){
        println "Clean Up Files"
    }
}

//create custom tasks in Gradle by defining them in the build script using
// task or by creating custom task classes
class HelloTask extends DefaultTask {
    @TaskAction
    def greet() {
        println 'Hello, Gradle!'
    }
}

//Task Dependencies and Finalizers
deployToProd.dependsOn deployToStage
deployToProd.finalizedBy cleanUpFiles
//Default Tasks
defaultTasks "deployToStage"
task hello(type: HelloTask)